// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.8.0
// source: banter/banter.proto

package banter

import (
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	twitch "github.com/autonomouskoi/twitch-tinygo"
	io "io"
	strconv "strconv"
)

type BusTopic int32

const (
	BusTopic_BANTER_EVENT   BusTopic = 0
	BusTopic_BANTER_REQUEST BusTopic = 1
	BusTopic_BANTER_COMMAND BusTopic = 2
)

// Enum value maps for BusTopic.
var (
	BusTopic_name = map[int32]string{
		0: "BANTER_EVENT",
		1: "BANTER_REQUEST",
		2: "BANTER_COMMAND",
	}
	BusTopic_value = map[string]int32{
		"BANTER_EVENT":   0,
		"BANTER_REQUEST": 1,
		"BANTER_COMMAND": 2,
	}
)

func (x BusTopic) Enum() *BusTopic {
	p := new(BusTopic)
	*p = x
	return p
}

func (x BusTopic) String() string {
	name, valid := BusTopic_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type MessageTypeRequest int32

const (
	MessageTypeRequest_CONFIG_GET_REQ     MessageTypeRequest = 0
	MessageTypeRequest_CONFIG_GET_RESP    MessageTypeRequest = 1
	MessageTypeRequest_BANTER_RENDER_REQ  MessageTypeRequest = 2
	MessageTypeRequest_BANTER_RENDER_RESP MessageTypeRequest = 3
)

// Enum value maps for MessageTypeRequest.
var (
	MessageTypeRequest_name = map[int32]string{
		0: "CONFIG_GET_REQ",
		1: "CONFIG_GET_RESP",
		2: "BANTER_RENDER_REQ",
		3: "BANTER_RENDER_RESP",
	}
	MessageTypeRequest_value = map[string]int32{
		"CONFIG_GET_REQ":     0,
		"CONFIG_GET_RESP":    1,
		"BANTER_RENDER_REQ":  2,
		"BANTER_RENDER_RESP": 3,
	}
)

func (x MessageTypeRequest) Enum() *MessageTypeRequest {
	p := new(MessageTypeRequest)
	*p = x
	return p
}

func (x MessageTypeRequest) String() string {
	name, valid := MessageTypeRequest_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type MessageTypeCommand int32

const (
	MessageTypeCommand_CONFIG_SET_REQ  MessageTypeCommand = 0
	MessageTypeCommand_CONFIG_SET_RESP MessageTypeCommand = 1
)

// Enum value maps for MessageTypeCommand.
var (
	MessageTypeCommand_name = map[int32]string{
		0: "CONFIG_SET_REQ",
		1: "CONFIG_SET_RESP",
	}
	MessageTypeCommand_value = map[string]int32{
		"CONFIG_SET_REQ":  0,
		"CONFIG_SET_RESP": 1,
	}
)

func (x MessageTypeCommand) Enum() *MessageTypeCommand {
	p := new(MessageTypeCommand)
	*p = x
	return p
}

func (x MessageTypeCommand) String() string {
	name, valid := MessageTypeCommand_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type Banter struct {
	unknownFields []byte
	Command       string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Disabled      bool   `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Random        bool   `protobuf:"varint,4,opt,name=random,proto3" json:"random,omitempty"`
	Id            int32  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Banter) Reset() {
	*x = Banter{}
}

func (*Banter) ProtoMessage() {}

func (x *Banter) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Banter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Banter) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Banter) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

func (x *Banter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EventSettings struct {
	unknownFields []byte
	Enabled       bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *EventSettings) Reset() {
	*x = EventSettings{}
}

func (*EventSettings) ProtoMessage() {}

func (x *EventSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EventSettings) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GuestList struct {
	unknownFields []byte
	Members       []*GuestList_Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GuestList) Reset() {
	*x = GuestList{}
}

func (*GuestList) ProtoMessage() {}

func (x *GuestList) GetMembers() []*GuestList_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type GuestListCommand struct {
	unknownFields  []byte
	Command        string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	GuestListNames []string `protobuf:"bytes,2,rep,name=guest_list_names,json=guestListNames,proto3" json:"guestListNames,omitempty"`
}

func (x *GuestListCommand) Reset() {
	*x = GuestListCommand{}
}

func (*GuestListCommand) ProtoMessage() {}

func (x *GuestListCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GuestListCommand) GetGuestListNames() []string {
	if x != nil {
		return x.GuestListNames
	}
	return nil
}

type Config struct {
	unknownFields     []byte
	IntervalSeconds   uint32                       `protobuf:"varint,1,opt,name=interval_seconds,json=intervalSeconds,proto3" json:"intervalSeconds,omitempty"`
	CooldownSeconds   uint32                       `protobuf:"varint,2,opt,name=cooldown_seconds,json=cooldownSeconds,proto3" json:"cooldownSeconds,omitempty"`
	Banters           []*Banter                    `protobuf:"bytes,3,rep,name=banters,proto3" json:"banters,omitempty"`
	ChannelRaid       *EventSettings               `protobuf:"bytes,4,opt,name=channel_raid,json=channelRaid,proto3" json:"channelRaid,omitempty"`
	ChannelFollow     *EventSettings               `protobuf:"bytes,5,opt,name=channel_follow,json=channelFollow,proto3" json:"channelFollow,omitempty"`
	ChannelCheer      *EventSettings               `protobuf:"bytes,6,opt,name=channel_cheer,json=channelCheer,proto3" json:"channelCheer,omitempty"`
	GuestLists        map[string]*GuestList        `protobuf:"bytes,8,rep,name=guest_lists,json=guestLists,proto3" json:"guestLists,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GuestListCommands map[string]*GuestListCommand `protobuf:"bytes,9,rep,name=guest_list_commands,json=guestListCommands,proto3" json:"guestListCommands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SendAs            string                       `protobuf:"bytes,10,opt,name=send_as,json=sendAs,proto3" json:"sendAs,omitempty"`
	SendTo            string                       `protobuf:"bytes,11,opt,name=send_to,json=sendTo,proto3" json:"sendTo,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
}

func (*Config) ProtoMessage() {}

func (x *Config) GetIntervalSeconds() uint32 {
	if x != nil {
		return x.IntervalSeconds
	}
	return 0
}

func (x *Config) GetCooldownSeconds() uint32 {
	if x != nil {
		return x.CooldownSeconds
	}
	return 0
}

func (x *Config) GetBanters() []*Banter {
	if x != nil {
		return x.Banters
	}
	return nil
}

func (x *Config) GetChannelRaid() *EventSettings {
	if x != nil {
		return x.ChannelRaid
	}
	return nil
}

func (x *Config) GetChannelFollow() *EventSettings {
	if x != nil {
		return x.ChannelFollow
	}
	return nil
}

func (x *Config) GetChannelCheer() *EventSettings {
	if x != nil {
		return x.ChannelCheer
	}
	return nil
}

func (x *Config) GetGuestLists() map[string]*GuestList {
	if x != nil {
		return x.GuestLists
	}
	return nil
}

func (x *Config) GetGuestListCommands() map[string]*GuestListCommand {
	if x != nil {
		return x.GuestListCommands
	}
	return nil
}

func (x *Config) GetSendAs() string {
	if x != nil {
		return x.SendAs
	}
	return ""
}

func (x *Config) GetSendTo() string {
	if x != nil {
		return x.SendTo
	}
	return ""
}

type ConfigGetRequest struct {
	unknownFields []byte
}

func (x *ConfigGetRequest) Reset() {
	*x = ConfigGetRequest{}
}

func (*ConfigGetRequest) ProtoMessage() {}

type ConfigGetResponse struct {
	unknownFields []byte
	Config        *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigGetResponse) Reset() {
	*x = ConfigGetResponse{}
}

func (*ConfigGetResponse) ProtoMessage() {}

func (x *ConfigGetResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type BanterRenderRequest struct {
	unknownFields []byte
	Banter        *Banter                         `protobuf:"bytes,1,opt,name=banter,proto3" json:"banter,omitempty"`
	Original      *twitch.EventChannelChatMessage `protobuf:"bytes,2,opt,name=original,proto3" json:"original,omitempty"`
	Sender        *twitch.User                    `protobuf:"bytes,3,opt,name=sender,proto3,oneof" json:"sender,omitempty"`
}

func (x *BanterRenderRequest) Reset() {
	*x = BanterRenderRequest{}
}

func (*BanterRenderRequest) ProtoMessage() {}

func (x *BanterRenderRequest) GetBanter() *Banter {
	if x != nil {
		return x.Banter
	}
	return nil
}

func (x *BanterRenderRequest) GetOriginal() *twitch.EventChannelChatMessage {
	if x != nil {
		return x.Original
	}
	return nil
}

func (x *BanterRenderRequest) GetSender() *twitch.User {
	if x != nil {
		return x.Sender
	}
	return nil
}

type BanterRenderResponse struct {
	unknownFields []byte
	Output        string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *BanterRenderResponse) Reset() {
	*x = BanterRenderResponse{}
}

func (*BanterRenderResponse) ProtoMessage() {}

func (x *BanterRenderResponse) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type ConfigSetRequest struct {
	unknownFields []byte
	Config        *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigSetRequest) Reset() {
	*x = ConfigSetRequest{}
}

func (*ConfigSetRequest) ProtoMessage() {}

func (x *ConfigSetRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigSetResponse struct {
	unknownFields []byte
	Config        *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigSetResponse) Reset() {
	*x = ConfigSetResponse{}
}

func (*ConfigSetResponse) ProtoMessage() {}

func (x *ConfigSetResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type GuestList_Member struct {
	unknownFields []byte
	Login         string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GuestList_Member) Reset() {
	*x = GuestList_Member{}
}

func (*GuestList_Member) ProtoMessage() {}

func (x *GuestList_Member) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *GuestList_Member) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Config_GuestListsEntry struct {
	unknownFields []byte
	Key           string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *GuestList `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Config_GuestListsEntry) Reset() {
	*x = Config_GuestListsEntry{}
}

func (*Config_GuestListsEntry) ProtoMessage() {}

func (x *Config_GuestListsEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Config_GuestListsEntry) GetValue() *GuestList {
	if x != nil {
		return x.Value
	}
	return nil
}

type Config_GuestListCommandsEntry struct {
	unknownFields []byte
	Key           string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *GuestListCommand `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Config_GuestListCommandsEntry) Reset() {
	*x = Config_GuestListCommandsEntry{}
}

func (*Config_GuestListCommandsEntry) ProtoMessage() {}

func (x *Config_GuestListCommandsEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Config_GuestListCommandsEntry) GetValue() *GuestListCommand {
	if x != nil {
		return x.Value
	}
	return nil
}

func (m *Banter) CloneVT() *Banter {
	if m == nil {
		return (*Banter)(nil)
	}
	r := new(Banter)
	r.Command = m.Command
	r.Text = m.Text
	r.Disabled = m.Disabled
	r.Random = m.Random
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Banter) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *EventSettings) CloneVT() *EventSettings {
	if m == nil {
		return (*EventSettings)(nil)
	}
	r := new(EventSettings)
	r.Enabled = m.Enabled
	r.Text = m.Text
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *EventSettings) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *GuestList_Member) CloneVT() *GuestList_Member {
	if m == nil {
		return (*GuestList_Member)(nil)
	}
	r := new(GuestList_Member)
	r.Login = m.Login
	r.Id = m.Id
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GuestList_Member) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *GuestList) CloneVT() *GuestList {
	if m == nil {
		return (*GuestList)(nil)
	}
	r := new(GuestList)
	if rhs := m.Members; rhs != nil {
		tmpContainer := make([]*GuestList_Member, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Members = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GuestList) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *GuestListCommand) CloneVT() *GuestListCommand {
	if m == nil {
		return (*GuestListCommand)(nil)
	}
	r := new(GuestListCommand)
	r.Command = m.Command
	if rhs := m.GuestListNames; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.GuestListNames = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GuestListCommand) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Config) CloneVT() *Config {
	if m == nil {
		return (*Config)(nil)
	}
	r := new(Config)
	r.IntervalSeconds = m.IntervalSeconds
	r.CooldownSeconds = m.CooldownSeconds
	r.ChannelRaid = m.ChannelRaid.CloneVT()
	r.ChannelFollow = m.ChannelFollow.CloneVT()
	r.ChannelCheer = m.ChannelCheer.CloneVT()
	r.SendAs = m.SendAs
	r.SendTo = m.SendTo
	if rhs := m.Banters; rhs != nil {
		tmpContainer := make([]*Banter, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Banters = tmpContainer
	}
	if rhs := m.GuestLists; rhs != nil {
		tmpContainer := make(map[string]*GuestList, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.GuestLists = tmpContainer
	}
	if rhs := m.GuestListCommands; rhs != nil {
		tmpContainer := make(map[string]*GuestListCommand, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.GuestListCommands = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Config) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigGetRequest) CloneVT() *ConfigGetRequest {
	if m == nil {
		return (*ConfigGetRequest)(nil)
	}
	r := new(ConfigGetRequest)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigGetRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigGetResponse) CloneVT() *ConfigGetResponse {
	if m == nil {
		return (*ConfigGetResponse)(nil)
	}
	r := new(ConfigGetResponse)
	r.Config = m.Config.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigGetResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BanterRenderRequest) CloneVT() *BanterRenderRequest {
	if m == nil {
		return (*BanterRenderRequest)(nil)
	}
	r := new(BanterRenderRequest)
	r.Banter = m.Banter.CloneVT()
	if rhs := m.Original; rhs != nil {
		r.Original = rhs.CloneVT()
	}
	if rhs := m.Sender; rhs != nil {
		r.Sender = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BanterRenderRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BanterRenderResponse) CloneVT() *BanterRenderResponse {
	if m == nil {
		return (*BanterRenderResponse)(nil)
	}
	r := new(BanterRenderResponse)
	r.Output = m.Output
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BanterRenderResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigSetRequest) CloneVT() *ConfigSetRequest {
	if m == nil {
		return (*ConfigSetRequest)(nil)
	}
	r := new(ConfigSetRequest)
	r.Config = m.Config.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigSetRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConfigSetResponse) CloneVT() *ConfigSetResponse {
	if m == nil {
		return (*ConfigSetResponse)(nil)
	}
	r := new(ConfigSetResponse)
	r.Config = m.Config.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConfigSetResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Banter) EqualVT(that *Banter) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Command != that.Command {
		return false
	}
	if this.Text != that.Text {
		return false
	}
	if this.Disabled != that.Disabled {
		return false
	}
	if this.Random != that.Random {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Banter) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Banter)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *EventSettings) EqualVT(that *EventSettings) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Enabled != that.Enabled {
		return false
	}
	if this.Text != that.Text {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *EventSettings) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*EventSettings)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GuestList_Member) EqualVT(that *GuestList_Member) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Login != that.Login {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GuestList_Member) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*GuestList_Member)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GuestList) EqualVT(that *GuestList) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Members) != len(that.Members) {
		return false
	}
	for i, vx := range this.Members {
		vy := that.Members[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GuestList_Member{}
			}
			if q == nil {
				q = &GuestList_Member{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GuestList) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*GuestList)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *GuestListCommand) EqualVT(that *GuestListCommand) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Command != that.Command {
		return false
	}
	if len(this.GuestListNames) != len(that.GuestListNames) {
		return false
	}
	for i, vx := range this.GuestListNames {
		vy := that.GuestListNames[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GuestListCommand) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*GuestListCommand)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Config) EqualVT(that *Config) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IntervalSeconds != that.IntervalSeconds {
		return false
	}
	if this.CooldownSeconds != that.CooldownSeconds {
		return false
	}
	if len(this.Banters) != len(that.Banters) {
		return false
	}
	for i, vx := range this.Banters {
		vy := that.Banters[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Banter{}
			}
			if q == nil {
				q = &Banter{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.ChannelRaid.EqualVT(that.ChannelRaid) {
		return false
	}
	if !this.ChannelFollow.EqualVT(that.ChannelFollow) {
		return false
	}
	if !this.ChannelCheer.EqualVT(that.ChannelCheer) {
		return false
	}
	if len(this.GuestLists) != len(that.GuestLists) {
		return false
	}
	for i, vx := range this.GuestLists {
		vy, ok := that.GuestLists[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GuestList{}
			}
			if q == nil {
				q = &GuestList{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.GuestListCommands) != len(that.GuestListCommands) {
		return false
	}
	for i, vx := range this.GuestListCommands {
		vy, ok := that.GuestListCommands[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &GuestListCommand{}
			}
			if q == nil {
				q = &GuestListCommand{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.SendAs != that.SendAs {
		return false
	}
	if this.SendTo != that.SendTo {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Config) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Config)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigGetRequest) EqualVT(that *ConfigGetRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigGetRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigGetRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigGetResponse) EqualVT(that *ConfigGetResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigGetResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigGetResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BanterRenderRequest) EqualVT(that *BanterRenderRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Banter.EqualVT(that.Banter) {
		return false
	}
	if !this.Original.EqualVT(that.Original) {
		return false
	}
	if !this.Sender.EqualVT(that.Sender) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BanterRenderRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BanterRenderRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BanterRenderResponse) EqualVT(that *BanterRenderResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Output != that.Output {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BanterRenderResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BanterRenderResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigSetRequest) EqualVT(that *ConfigSetRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigSetRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigSetRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConfigSetResponse) EqualVT(that *ConfigSetResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Config.EqualVT(that.Config) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConfigSetResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConfigSetResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the BusTopic to JSON.
func (x BusTopic) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), BusTopic_name)
}

// MarshalText marshals the BusTopic to text.
func (x BusTopic) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), BusTopic_name)), nil
}

// MarshalJSON marshals the BusTopic to JSON.
func (x BusTopic) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BusTopic from JSON.
func (x *BusTopic) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(BusTopic_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read BusTopic enum: %v", err)
		return
	}
	*x = BusTopic(v)
}

// UnmarshalText unmarshals the BusTopic from text.
func (x *BusTopic) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), BusTopic_value)
	if err != nil {
		return err
	}
	*x = BusTopic(i)
	return nil
}

// UnmarshalJSON unmarshals the BusTopic from JSON.
func (x *BusTopic) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageTypeRequest to JSON.
func (x MessageTypeRequest) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MessageTypeRequest_name)
}

// MarshalText marshals the MessageTypeRequest to text.
func (x MessageTypeRequest) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MessageTypeRequest_name)), nil
}

// MarshalJSON marshals the MessageTypeRequest to JSON.
func (x MessageTypeRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageTypeRequest from JSON.
func (x *MessageTypeRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MessageTypeRequest_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MessageTypeRequest enum: %v", err)
		return
	}
	*x = MessageTypeRequest(v)
}

// UnmarshalText unmarshals the MessageTypeRequest from text.
func (x *MessageTypeRequest) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MessageTypeRequest_value)
	if err != nil {
		return err
	}
	*x = MessageTypeRequest(i)
	return nil
}

// UnmarshalJSON unmarshals the MessageTypeRequest from JSON.
func (x *MessageTypeRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageTypeCommand to JSON.
func (x MessageTypeCommand) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MessageTypeCommand_name)
}

// MarshalText marshals the MessageTypeCommand to text.
func (x MessageTypeCommand) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MessageTypeCommand_name)), nil
}

// MarshalJSON marshals the MessageTypeCommand to JSON.
func (x MessageTypeCommand) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageTypeCommand from JSON.
func (x *MessageTypeCommand) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MessageTypeCommand_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MessageTypeCommand enum: %v", err)
		return
	}
	*x = MessageTypeCommand(v)
}

// UnmarshalText unmarshals the MessageTypeCommand from text.
func (x *MessageTypeCommand) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MessageTypeCommand_value)
	if err != nil {
		return err
	}
	*x = MessageTypeCommand(i)
	return nil
}

// UnmarshalJSON unmarshals the MessageTypeCommand from JSON.
func (x *MessageTypeCommand) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Banter message to JSON.
func (x *Banter) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Command != "" || s.HasField("command") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("command")
		s.WriteString(x.Command)
	}
	if x.Text != "" || s.HasField("text") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("text")
		s.WriteString(x.Text)
	}
	if x.Disabled || s.HasField("disabled") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("disabled")
		s.WriteBool(x.Disabled)
	}
	if x.Random || s.HasField("random") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("random")
		s.WriteBool(x.Random)
	}
	if x.Id != 0 || s.HasField("id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("id")
		s.WriteInt32(x.Id)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Banter to JSON.
func (x *Banter) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Banter message from JSON.
func (x *Banter) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "command":
			s.AddField("command")
			x.Command = s.ReadString()
		case "text":
			s.AddField("text")
			x.Text = s.ReadString()
		case "disabled":
			s.AddField("disabled")
			x.Disabled = s.ReadBool()
		case "random":
			s.AddField("random")
			x.Random = s.ReadBool()
		case "id":
			s.AddField("id")
			x.Id = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the Banter from JSON.
func (x *Banter) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the EventSettings message to JSON.
func (x *EventSettings) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Enabled || s.HasField("enabled") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("enabled")
		s.WriteBool(x.Enabled)
	}
	if x.Text != "" || s.HasField("text") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("text")
		s.WriteString(x.Text)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the EventSettings to JSON.
func (x *EventSettings) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the EventSettings message from JSON.
func (x *EventSettings) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "enabled":
			s.AddField("enabled")
			x.Enabled = s.ReadBool()
		case "text":
			s.AddField("text")
			x.Text = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the EventSettings from JSON.
func (x *EventSettings) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GuestList_Member message to JSON.
func (x *GuestList_Member) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Login != "" || s.HasField("login") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("login")
		s.WriteString(x.Login)
	}
	if x.Id != "" || s.HasField("id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("id")
		s.WriteString(x.Id)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GuestList_Member to JSON.
func (x *GuestList_Member) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GuestList_Member message from JSON.
func (x *GuestList_Member) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "login":
			s.AddField("login")
			x.Login = s.ReadString()
		case "id":
			s.AddField("id")
			x.Id = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the GuestList_Member from JSON.
func (x *GuestList_Member) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GuestList message to JSON.
func (x *GuestList) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Members) > 0 || s.HasField("members") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("members")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Members {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("members"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GuestList to JSON.
func (x *GuestList) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GuestList message from JSON.
func (x *GuestList) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "members":
			s.AddField("members")
			if s.ReadNil() {
				x.Members = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Members = append(x.Members, nil)
					return
				}
				v := &GuestList_Member{}
				v.UnmarshalProtoJSON(s.WithField("members", false))
				if s.Err() != nil {
					return
				}
				x.Members = append(x.Members, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the GuestList from JSON.
func (x *GuestList) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GuestListCommand message to JSON.
func (x *GuestListCommand) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Command != "" || s.HasField("command") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("command")
		s.WriteString(x.Command)
	}
	if len(x.GuestListNames) > 0 || s.HasField("guestListNames") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("guestListNames")
		s.WriteStringArray(x.GuestListNames)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GuestListCommand to JSON.
func (x *GuestListCommand) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GuestListCommand message from JSON.
func (x *GuestListCommand) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "command":
			s.AddField("command")
			x.Command = s.ReadString()
		case "guest_list_names", "guestListNames":
			s.AddField("guest_list_names")
			if s.ReadNil() {
				x.GuestListNames = nil
				return
			}
			x.GuestListNames = s.ReadStringArray()
		}
	})
}

// UnmarshalJSON unmarshals the GuestListCommand from JSON.
func (x *GuestListCommand) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config_GuestListsEntry message to JSON.
func (x *Config_GuestListsEntry) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Key != "" || s.HasField("key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key")
		s.WriteString(x.Key)
	}
	if x.Value != nil || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		x.Value.MarshalProtoJSON(s.WithField("value"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config_GuestListsEntry to JSON.
func (x *Config_GuestListsEntry) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config_GuestListsEntry message from JSON.
func (x *Config_GuestListsEntry) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "key":
			s.AddField("key")
			x.Key = s.ReadString()
		case "value":
			if s.ReadNil() {
				x.Value = nil
				return
			}
			x.Value = &GuestList{}
			x.Value.UnmarshalProtoJSON(s.WithField("value", true))
		}
	})
}

// UnmarshalJSON unmarshals the Config_GuestListsEntry from JSON.
func (x *Config_GuestListsEntry) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config_GuestListCommandsEntry message to JSON.
func (x *Config_GuestListCommandsEntry) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Key != "" || s.HasField("key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key")
		s.WriteString(x.Key)
	}
	if x.Value != nil || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		x.Value.MarshalProtoJSON(s.WithField("value"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config_GuestListCommandsEntry to JSON.
func (x *Config_GuestListCommandsEntry) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config_GuestListCommandsEntry message from JSON.
func (x *Config_GuestListCommandsEntry) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "key":
			s.AddField("key")
			x.Key = s.ReadString()
		case "value":
			if s.ReadNil() {
				x.Value = nil
				return
			}
			x.Value = &GuestListCommand{}
			x.Value.UnmarshalProtoJSON(s.WithField("value", true))
		}
	})
}

// UnmarshalJSON unmarshals the Config_GuestListCommandsEntry from JSON.
func (x *Config_GuestListCommandsEntry) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config message to JSON.
func (x *Config) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.IntervalSeconds != 0 || s.HasField("intervalSeconds") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("intervalSeconds")
		s.WriteUint32(x.IntervalSeconds)
	}
	if x.CooldownSeconds != 0 || s.HasField("cooldownSeconds") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cooldownSeconds")
		s.WriteUint32(x.CooldownSeconds)
	}
	if len(x.Banters) > 0 || s.HasField("banters") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("banters")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Banters {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("banters"))
		}
		s.WriteArrayEnd()
	}
	if x.ChannelRaid != nil || s.HasField("channelRaid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channelRaid")
		x.ChannelRaid.MarshalProtoJSON(s.WithField("channelRaid"))
	}
	if x.ChannelFollow != nil || s.HasField("channelFollow") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channelFollow")
		x.ChannelFollow.MarshalProtoJSON(s.WithField("channelFollow"))
	}
	if x.ChannelCheer != nil || s.HasField("channelCheer") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channelCheer")
		x.ChannelCheer.MarshalProtoJSON(s.WithField("channelCheer"))
	}
	if x.GuestLists != nil || s.HasField("guestLists") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("guestLists")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.GuestLists {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			v.MarshalProtoJSON(s.WithField("guestLists"))
		}
		s.WriteObjectEnd()
	}
	if x.GuestListCommands != nil || s.HasField("guestListCommands") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("guestListCommands")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.GuestListCommands {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			v.MarshalProtoJSON(s.WithField("guestListCommands"))
		}
		s.WriteObjectEnd()
	}
	if x.SendAs != "" || s.HasField("sendAs") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sendAs")
		s.WriteString(x.SendAs)
	}
	if x.SendTo != "" || s.HasField("sendTo") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sendTo")
		s.WriteString(x.SendTo)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config to JSON.
func (x *Config) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config message from JSON.
func (x *Config) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "interval_seconds", "intervalSeconds":
			s.AddField("interval_seconds")
			x.IntervalSeconds = s.ReadUint32()
		case "cooldown_seconds", "cooldownSeconds":
			s.AddField("cooldown_seconds")
			x.CooldownSeconds = s.ReadUint32()
		case "banters":
			s.AddField("banters")
			if s.ReadNil() {
				x.Banters = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Banters = append(x.Banters, nil)
					return
				}
				v := &Banter{}
				v.UnmarshalProtoJSON(s.WithField("banters", false))
				if s.Err() != nil {
					return
				}
				x.Banters = append(x.Banters, v)
			})
		case "channel_raid", "channelRaid":
			if s.ReadNil() {
				x.ChannelRaid = nil
				return
			}
			x.ChannelRaid = &EventSettings{}
			x.ChannelRaid.UnmarshalProtoJSON(s.WithField("channel_raid", true))
		case "channel_follow", "channelFollow":
			if s.ReadNil() {
				x.ChannelFollow = nil
				return
			}
			x.ChannelFollow = &EventSettings{}
			x.ChannelFollow.UnmarshalProtoJSON(s.WithField("channel_follow", true))
		case "channel_cheer", "channelCheer":
			if s.ReadNil() {
				x.ChannelCheer = nil
				return
			}
			x.ChannelCheer = &EventSettings{}
			x.ChannelCheer.UnmarshalProtoJSON(s.WithField("channel_cheer", true))
		case "guest_lists", "guestLists":
			s.AddField("guest_lists")
			if s.ReadNil() {
				x.GuestLists = nil
				return
			}
			x.GuestLists = make(map[string]*GuestList)
			s.ReadStringMap(func(key string) {
				var v GuestList
				v.UnmarshalProtoJSON(s)
				x.GuestLists[key] = &v
			})
		case "guest_list_commands", "guestListCommands":
			s.AddField("guest_list_commands")
			if s.ReadNil() {
				x.GuestListCommands = nil
				return
			}
			x.GuestListCommands = make(map[string]*GuestListCommand)
			s.ReadStringMap(func(key string) {
				var v GuestListCommand
				v.UnmarshalProtoJSON(s)
				x.GuestListCommands[key] = &v
			})
		case "send_as", "sendAs":
			s.AddField("send_as")
			x.SendAs = s.ReadString()
		case "send_to", "sendTo":
			s.AddField("send_to")
			x.SendTo = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the Config from JSON.
func (x *Config) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigGetRequest message to JSON.
func (x *ConfigGetRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigGetRequest to JSON.
func (x *ConfigGetRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigGetRequest message from JSON.
func (x *ConfigGetRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the ConfigGetRequest from JSON.
func (x *ConfigGetRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigGetResponse message to JSON.
func (x *ConfigGetResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Config != nil || s.HasField("config") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("config")
		x.Config.MarshalProtoJSON(s.WithField("config"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigGetResponse to JSON.
func (x *ConfigGetResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigGetResponse message from JSON.
func (x *ConfigGetResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "config":
			if s.ReadNil() {
				x.Config = nil
				return
			}
			x.Config = &Config{}
			x.Config.UnmarshalProtoJSON(s.WithField("config", true))
		}
	})
}

// UnmarshalJSON unmarshals the ConfigGetResponse from JSON.
func (x *ConfigGetResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BanterRenderRequest message to JSON.
func (x *BanterRenderRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Banter != nil || s.HasField("banter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("banter")
		x.Banter.MarshalProtoJSON(s.WithField("banter"))
	}
	if x.Original != nil || s.HasField("original") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("original")
		x.Original.MarshalProtoJSON(s.WithField("original"))
	}
	if x.Sender != nil || s.HasField("sender") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sender")
		x.Sender.MarshalProtoJSON(s.WithField("sender"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BanterRenderRequest to JSON.
func (x *BanterRenderRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BanterRenderRequest message from JSON.
func (x *BanterRenderRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "banter":
			if s.ReadNil() {
				x.Banter = nil
				return
			}
			x.Banter = &Banter{}
			x.Banter.UnmarshalProtoJSON(s.WithField("banter", true))
		case "original":
			if s.ReadNil() {
				x.Original = nil
				return
			}
			x.Original = &twitch.EventChannelChatMessage{}
			x.Original.UnmarshalProtoJSON(s.WithField("original", true))
		case "sender":
			if s.ReadNil() {
				x.Sender = nil
				return
			}
			x.Sender = &twitch.User{}
			x.Sender.UnmarshalProtoJSON(s.WithField("sender", true))
		}
	})
}

// UnmarshalJSON unmarshals the BanterRenderRequest from JSON.
func (x *BanterRenderRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BanterRenderResponse message to JSON.
func (x *BanterRenderResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Output != "" || s.HasField("output") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("output")
		s.WriteString(x.Output)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BanterRenderResponse to JSON.
func (x *BanterRenderResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BanterRenderResponse message from JSON.
func (x *BanterRenderResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "output":
			s.AddField("output")
			x.Output = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the BanterRenderResponse from JSON.
func (x *BanterRenderResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigSetRequest message to JSON.
func (x *ConfigSetRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Config != nil || s.HasField("config") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("config")
		x.Config.MarshalProtoJSON(s.WithField("config"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigSetRequest to JSON.
func (x *ConfigSetRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigSetRequest message from JSON.
func (x *ConfigSetRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "config":
			if s.ReadNil() {
				x.Config = nil
				return
			}
			x.Config = &Config{}
			x.Config.UnmarshalProtoJSON(s.WithField("config", true))
		}
	})
}

// UnmarshalJSON unmarshals the ConfigSetRequest from JSON.
func (x *ConfigSetRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConfigSetResponse message to JSON.
func (x *ConfigSetResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Config != nil || s.HasField("config") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("config")
		x.Config.MarshalProtoJSON(s.WithField("config"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConfigSetResponse to JSON.
func (x *ConfigSetResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConfigSetResponse message from JSON.
func (x *ConfigSetResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "config":
			if s.ReadNil() {
				x.Config = nil
				return
			}
			x.Config = &Config{}
			x.Config.UnmarshalProtoJSON(s.WithField("config", true))
		}
	})
}

// UnmarshalJSON unmarshals the ConfigSetResponse from JSON.
func (x *ConfigSetResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Banter) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Banter) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Banter) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Id != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Random {
		i--
		if m.Random {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSettings) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettings) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *EventSettings) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuestList_Member) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestList_Member) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GuestList_Member) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Login) > 0 {
		i -= len(m.Login)
		copy(dAtA[i:], m.Login)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Login)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GuestList) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestList) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GuestList) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Members[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuestListCommand) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestListCommand) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GuestListCommand) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.GuestListNames) > 0 {
		for iNdEx := len(m.GuestListNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GuestListNames[iNdEx])
			copy(dAtA[i:], m.GuestListNames[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.GuestListNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Config) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Config) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.SendTo) > 0 {
		i -= len(m.SendTo)
		copy(dAtA[i:], m.SendTo)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.SendTo)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SendAs) > 0 {
		i -= len(m.SendAs)
		copy(dAtA[i:], m.SendAs)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.SendAs)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GuestListCommands) > 0 {
		for k := range m.GuestListCommands {
			v := m.GuestListCommands[k]
			baseI := i
			size, err := v.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.GuestLists) > 0 {
		for k := range m.GuestLists {
			v := m.GuestLists[k]
			baseI := i
			size, err := v.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ChannelCheer != nil {
		size, err := m.ChannelCheer.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.ChannelFollow != nil {
		size, err := m.ChannelFollow.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChannelRaid != nil {
		size, err := m.ChannelRaid.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Banters) > 0 {
		for iNdEx := len(m.Banters) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Banters[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CooldownSeconds != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.CooldownSeconds))
		i--
		dAtA[i] = 0x10
	}
	if m.IntervalSeconds != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.IntervalSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigGetRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigGetRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigGetRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *ConfigGetResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigGetResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigGetResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Config != nil {
		size, err := m.Config.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BanterRenderRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BanterRenderRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BanterRenderRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Sender != nil {
		size, err := m.Sender.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.Original != nil {
		size, err := m.Original.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Banter != nil {
		size, err := m.Banter.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BanterRenderResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BanterRenderResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BanterRenderResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSetRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSetRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigSetRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Config != nil {
		size, err := m.Config.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSetResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSetResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConfigSetResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Config != nil {
		size, err := m.Config.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Banter) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Disabled {
		n += 2
	}
	if m.Random {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Id))
	}
	n += len(m.unknownFields)
	return n
}

func (m *EventSettings) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GuestList_Member) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Login)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GuestList) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *GuestListCommand) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.GuestListNames) > 0 {
		for _, s := range m.GuestListNames {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *Config) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntervalSeconds != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.IntervalSeconds))
	}
	if m.CooldownSeconds != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.CooldownSeconds))
	}
	if len(m.Banters) > 0 {
		for _, e := range m.Banters {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.ChannelRaid != nil {
		l = m.ChannelRaid.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ChannelFollow != nil {
		l = m.ChannelFollow.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ChannelCheer != nil {
		l = m.ChannelCheer.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.GuestLists) > 0 {
		for k, v := range m.GuestLists {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.SizeVT()
			}
			l += 1 + protobuf_go_lite.SizeOfVarint(uint64(l))
			mapEntrySize := 1 + len(k) + protobuf_go_lite.SizeOfVarint(uint64(len(k))) + l
			n += mapEntrySize + 1 + protobuf_go_lite.SizeOfVarint(uint64(mapEntrySize))
		}
	}
	if len(m.GuestListCommands) > 0 {
		for k, v := range m.GuestListCommands {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.SizeVT()
			}
			l += 1 + protobuf_go_lite.SizeOfVarint(uint64(l))
			mapEntrySize := 1 + len(k) + protobuf_go_lite.SizeOfVarint(uint64(len(k))) + l
			n += mapEntrySize + 1 + protobuf_go_lite.SizeOfVarint(uint64(mapEntrySize))
		}
	}
	l = len(m.SendAs)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.SendTo)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ConfigGetRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *ConfigGetResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BanterRenderRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Banter != nil {
		l = m.Banter.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Original != nil {
		l = m.Original.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BanterRenderResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ConfigSetRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ConfigSetResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Banter) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Random = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSettings) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestList_Member) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestList_Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestList_Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestList) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GuestList_Member{})
			if err := m.Members[len(m.Members)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestListCommand) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestListCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestListCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestListNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestListNames = append(m.GuestListNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalSeconds", wireType)
			}
			m.IntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CooldownSeconds", wireType)
			}
			m.CooldownSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CooldownSeconds |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banters = append(m.Banters, &Banter{})
			if err := m.Banters[len(m.Banters)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelRaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelRaid == nil {
				m.ChannelRaid = &EventSettings{}
			}
			if err := m.ChannelRaid.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelFollow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelFollow == nil {
				m.ChannelFollow = &EventSettings{}
			}
			if err := m.ChannelFollow.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelCheer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelCheer == nil {
				m.ChannelCheer = &EventSettings{}
			}
			if err := m.ChannelCheer.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuestLists == nil {
				m.GuestLists = make(map[string]*GuestList)
			}
			var mapkey string
			var mapvalue *GuestList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuestList{}
					if err := mapvalue.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuestLists[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestListCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuestListCommands == nil {
				m.GuestListCommands = make(map[string]*GuestListCommand)
			}
			var mapkey string
			var mapvalue *GuestListCommand
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuestListCommand{}
					if err := mapvalue.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuestListCommands[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigGetRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigGetResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BanterRenderRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanterRenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanterRenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Banter == nil {
				m.Banter = &Banter{}
			}
			if err := m.Banter.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Original", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Original == nil {
				m.Original = &twitch.EventChannelChatMessage{}
			}
			if err := m.Original.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &twitch.User{}
			}
			if err := m.Sender.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BanterRenderResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanterRenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanterRenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSetRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSetResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
